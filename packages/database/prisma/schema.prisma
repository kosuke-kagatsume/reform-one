generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  MEMBER
  DEPARTMENT_MANAGER
}

enum SubscriptionStatus {
  ACTIVE
  SUSPENDED
  CANCELLED
  PENDING
}

enum PlanType {
  PREMIUM_10M
  PREMIUM_20M
  BASIC
}

enum ContentStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

// Organizations
model Organization {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  domainRestriction String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  users         UserOrganization[]
  subscriptions Subscription[]
  settings      OrganizationSettings?
  invitations   Invitation[]
  auditLogs     AuditLog[]
  
  @@index([slug])
}

model OrganizationSettings {
  id                String   @id @default(cuid())
  organizationId    String   @unique
  enforceMfa        Boolean  @default(false)
  seatLimit         Int?     // null = unlimited
  allowedDomains    String[]
  customRoles       Json?    // Custom role definitions
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

// Users
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?  // null for magic link users
  mfaEnabled    Boolean  @default(false)
  mfaSecret     String?
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  organizations UserOrganization[]
  sessions      Session[]
  auditLogs     AuditLog[]
  invitations   Invitation[]
  
  @@index([email])
}

model UserOrganization {
  userId         String
  organizationId String
  role           Role     @default(MEMBER)
  departmentId   String?
  joinedAt       DateTime @default(now())
  
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@id([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

// Sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([sessionToken])
  @@index([userId])
}

// Invitations
model Invitation {
  id             String   @id @default(cuid())
  email          String
  token          String   @unique
  organizationId String
  role           Role     @default(MEMBER)
  invitedById    String
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime @default(now())
  
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy    User         @relation(fields: [invitedById], references: [id])
  
  @@index([token])
  @@index([email, organizationId])
}

// Billing & Subscriptions
model Subscription {
  id                 String             @id @default(cuid())
  organizationId     String
  planType           PlanType
  status             SubscriptionStatus @default(PENDING)
  stripeCustomerId   String?
  stripeSubscriptionId String?          @unique
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAt           DateTime?
  canceledAt         DateTime?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  entitlements Entitlement[]
  addons       Addon[]
  invoices     Invoice[]
  
  @@index([organizationId])
  @@index([stripeSubscriptionId])
}

model Entitlement {
  id             String   @id @default(cuid())
  subscriptionId String
  feature        String   // e-paper, community, databook, newsletter, etc
  limit          Int?     // null = unlimited
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionId, feature])
  @@index([subscriptionId])
}

model Addon {
  id             String   @id @default(cuid())
  subscriptionId String
  type           String   // paper, electronic_id
  quantity       Int      @default(1)
  pricePerUnit   Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId])
}

model Invoice {
  id               String   @id @default(cuid())
  subscriptionId   String
  stripeInvoiceId  String   @unique
  amount           Float
  currency         String   @default("JPY")
  status           String   // draft, open, paid, void, uncollectible
  paidAt           DateTime?
  dueDate          DateTime?
  invoiceNumber    String   @unique
  invoicePdf       String?
  taxAmount        Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId])
  @@index([stripeInvoiceId])
}

// Audit Logs
model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  orgId        String?
  action       String   // user.login, billing.upgrade, article.publish, etc
  resource     String?  // article:123, subscription:456
  metadata     Json?
  ip           String?
  userAgent    String?
  timestamp    DateTime @default(now())
  
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([orgId])
  @@index([action])
  @@index([timestamp])
}